<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

	<!-- name（必填）：当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样，此参数不是匹配条件，你当前项目叫什么名字就填什么，和提供者消费者角色无关 -->
	<!-- version： 当前应用的版本 -->
	<!-- owner：应用负责人，用于服务治理，请填写负责人公司邮箱前缀 -->
	<!-- organization：组织名称(BU或部门)，用于注册中心区分服务来源，此配置项建议不要使用autoconfig，直接写死在配置中，比如china,intl,itu,crm,asc,dw,aliexpress等 -->
	<!-- architecture：用于服务分层对应的架构。如，intl、china。不同的架构使用不同的分层 -->
	<!-- environment：应用环境，如：develop/test/product，不同环境使用不同的缺省值，以及作为只用于开发测试功能的限制条件 -->
	<!-- compiler：Java字节码编译器，用于动态类的生成，可选：jdk或javassist -->
	<!-- logger：日志输出方式，可选：slf4j,jcl,log4j,jdk -->
	<dubbo:application name="first-dubbo-provider" />

	<!-- id：注册中心引用BeanId，可以在<dubbo:service registry="">或<dubbo:reference registry="">中引用此ID -->
	<!-- address（必填）：注册中心服务器地址，如果地址没有端口缺省为9090，同一集群内的多个地址用逗号分隔，如：ip:port,ip:port，不同集群的注册中心，请配置多个<dubbo:registry>标签 -->
	<!-- protocol：注同中心地址协议，支持dubbo, http, local三种协议，分别表示，dubbo地址，http地址，本地注册中心 默认：dubbo -->
	<!-- port：注册中心缺省端口，当address没有带端口时使用此端口做为缺省值 默认：9090 -->
	<!-- username 登录注册中心用户名，如果注册中心不需要验证可不填 -->
	<!-- password：登录注册中心密码，如果注册中心不需要验证可不填 -->
	<!-- transport：网络传输方式，可选mina,netty 默认：netty -->
	<!-- timeout：注册中心请求超时时间(毫秒) 默认：5000 -->
	<!-- session：注册中心会话超时时间(毫秒)，用于检测提供者非正常断线后的脏数据，比如用心跳检测的实现，此时间就是心跳间隔，不同注册中心实现不一样 默认：60000 -->
	<!-- file：使用文件缓存注册中心地址列表及服务提供者列表，应用重启时将基于此文件恢复，注意：两个注册中心不能使用同一文件存储 -->
	<!-- wait：停止时等待通知完成时间(毫秒) 默认：0 -->
	<!-- check：注册中心不存在时，是否报错 默认：true -->
	<!-- register：是否向此注册中心注册服务，如果设为false，将只订阅，不注册 默认：true -->
	<!-- subscribe：是否向此注册中心订阅服务，如果设为false，将只注册，不订阅 默认：true -->
	<!-- dynamic：服务是否动态注册，如果设为false，注册后将显示后disable状态，需人工启用，并且服务提供者停止时，也不会自动取消册，需人工禁用 默认：true -->
	<!-- queues：线程池队列大小，当线程池满时，排队等待执行的队列大小，建议不要设置，当线程程池时应立即失败，重试其它服务提供机器，而不是排队，除非有特殊需求。默认：0 -->
	<!-- charset：序列化编码 默认：UTF-8 -->
	<!-- buffer：网络读写缓冲区大小 默认：8192 -->
	<!-- heartbeat：心跳间隔，对于长连接，当物理层断开时，比如拔网线，TCP的FIN消息来不及发送，对方收不到断开事件，此时需要心跳来帮助检查连接是否已断开 默认：0 -->
	<!-- telnet：所支持的telnet命令，多个命令用逗号分隔 -->
	<!-- register：该协议的服务是否注册到注册中心 默认：true -->
	<!-- contextpath：默认：缺省为空串 -->
	<dubbo:registry address="zookeeper://localhost:2181" file="DubboProvider/output/dubbo.cache"/>

	<!-- id：协议BeanId，可以在<dubbo:service protocol="">中引用此ID，如果ID不填，缺省和name属性值一样，重复则在name后加序号 默认：dubbo -->
	<!-- name（必填）：协议名称 默认：dubbo -->
	<!-- port：服务端口 默认：dubbo 20880 rmi 1099 http和hessian 80 -1或未配置 自动分配 -->
	<!-- host：服务主机名，多网卡选择或指定VIP及域名时使用，为空则自动查找本机IP，建议不要配置，让Dubbo自动获取本机IP 默认：自动查找本机ip -->
	<!-- threadpool：线程池类型，可选：fixed/cached 默认：fixed -->
	<!-- threads：服务线程池大小(固定大小) 默认：100 -->
	<!-- iothreads：io线程池大小(固定大小) 默认：cpu数+1 -->
	<!-- accepts：服务提供方最大可接受连接数 默认：0 -->
	<!-- payload：请求及响应数据包大小限制，单位：字节 默认：88388608(=8M) -->
	<!-- codec：协议编码方式 默认：dubbo -->
	<!-- serialization：协议序列化方式 默认：dubbo协议缺省为hessian2，rmi协议缺省为java，http协议缺省为json -->
	<!-- accesslog：设为true，将向logger中输出访问日志，也可填写访问日志文件路径，直接把访问日志输出到指定文件 -->
	<!-- path：提供者上下文路径，为服务path的前缀 -->
	<!-- transporter：协议的服务端和客户端实现类型，比如：dubbo协议的mina,netty等，可以分拆为server和client配置 默认：dubbo协议缺省为netty -->
	<!-- server：协议的服务器端实现类型，比如：dubbo协议的mina,netty等，http协议的jetty,servlet等 默认：dubbo协议缺省为netty，http协议缺省为servlet -->
	<!-- client：协议的客户端实现类型，比如：dubbo协议的mina,netty等 默认：dubbo协议缺省为netty -->
	<!-- dispatcher：协议的消息派发方式，用于指定线程模型，比如：dubbo协议的all, direct, message, execution, connection等 默认： dubbo协议缺省为all -->
	<dubbo:protocol name="dubbo" port="20880" />

	<!-- 声明需要暴露的服务接口 -->
	<!-- interface（必填）：服务接口名 -->
	<!-- ref（必填）：服务对象实现引用 -->
	<!-- version：服务版本，建议使用两位数字版本，如：1.0，通常在接口不兼容时版本号才需要升级 默认：0.0.0 -->
	<!-- group：服务分组，当一个接口有多个实现，可以用分组区分 -->
	<!-- path：服务路径 (注意：1.0不支持自定义路径，总是使用接口名，如果有1.0调2.0，配置服务路径可能不兼容) 默认：缺省为接口名 -->
	<!-- delay：延迟注册服务时间(毫秒) ，设为-1时，表示延迟到Spring容器初始化完成时暴露服务 默认：0 -->
	<!-- timeout：远程服务调用超时时间(毫秒) 默认：1000 -->
	<!-- retries：远程服务调用重试次数，不包括第一次调用，不需要重试请设为0 默认：2 -->
	<!-- connections：对每个提供者的最大连接数，rmi、http、hessian等短连接协议表示限制连接数，dubbo等长连接协表示建立的长连接个数 默认：100 -->
	<!-- loadbalance：负载均衡策略，可选值：random,roundrobin,leastactive，分别表示：随机，轮循，最少活跃调用 默认：random -->
	<!-- async：是否缺省异步执行，不可靠异步，只是忽略返回值，不阻塞执行线程 默认：false -->
	<!-- stub：设为true，表示使用缺省代理类名，即：接口名 + Local后缀，服务接口客户端本地代理类名，用于在客户端执行本地逻辑，如本地缓存等，该本地代理类的构造函数必须允许传入远程代理对象，构造函数如：public XxxServiceLocal(XxxService xxxService) 默认：false -->
	<!-- mock：设为true，表示使用缺省Mock类名，即：接口名 + Mock后缀，服务接口调用失败Mock实现类，该Mock类必须有一个无参构造函数，与Local的区别在于，Local总是被执行，而Mock只在出现非业务异常(比如超时，网络异常等)时执行，Local在远程调用之前执行，Mock在远程调用后执行。默认：false -->
	<!-- token：令牌验证，为空表示不开启，如果为true，表示随机生成动态令牌，否则使用静态令牌，令牌的作用是防止消费者绕过注册中心直接访问，保证注册中心的授权功能有效，如果使用点对点调用，需关闭令牌功能 默认：false -->
	<!-- registry：向指定注册中心注册，在多个注册中心时使用，值为<dubbo:registry>的id属性，多个注册中心ID用逗号分隔，如果不想将该服务注册到任何registry，可将值设为N/A 默认：向全部registry注册 -->
	<!-- provider：指定provider，值为<dubbo:provider>的id属性 默认：使用第一个provider配置 -->
	<!-- deprecated：服务是否过时，如果设为true，消费方引用时将打印服务过时警告error日志 默认：false -->
	<!-- dynamic：服务是否动态注册，如果设为false，注册后将显示后disable状态，需人工启用，并且服务提供者停止时，也不会自动取消册，需人工禁用。 默认：true -->
	<!-- accesslog：设为true，将向logger中输出访问日志，也可填写访问日志文件路径，直接把访问日志输出到指定文件 默认：false -->
	<!-- owner：服务负责人，用于服务治理，请填写负责人公司邮箱前缀 -->
	<!-- document：服务文档URL -->
	<!-- weight：服务权重 -->
	<!-- executes：服务提供者每服务每方法最大可并行执行请求数 默认：0 -->
	<!-- actives：每服务消费者每服务每方法最大并发调用数 默认：0 -->
	<!-- proxy：生成动态代理方式，可选：jdk/javassist 默认：javassist -->
	<!-- cluster：集群方式，可选：failover/failfast/failsafe/failback/forking 默认：failover -->
	<!-- filter：服务提供方远程调用过程拦截器名称，多个名称用逗号分隔 默认：default -->
	<!-- listener：服务提供方导出服务监听器名称，多个名称用逗号分隔 默认：default -->
	<!-- protocol：使用指定的协议暴露服务，在多协议时使用，值为<dubbo:protocol>的id属性，多个协议ID用逗号分隔  -->
	<!-- layer：服务提供者所在的分层。如：biz、dao、intl:web、china:acton  -->
	<!-- register：该协议的服务是否注册到注册中心 默认：true -->
	<dubbo:service interface="com.gust.gate.DemoService" ref="demoService" />

	<!-- 和本地bean一样实现服务 -->
	<bean id="demoService" class="com.gust.dubbo.provider.DemoServiceImpl" />

</beans>